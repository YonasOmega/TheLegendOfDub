from Model.DungeonGenerator import DungeonGenerator
from Model.rooms.Room import Room


class Dungeon:
    """
    Represents a dungeon containing a maze of room class.

    The Dungeon class uses the DungeonGenerator to create a maze layout and then fills this maze with Room instances.
    It also tracks the initial player's location within the dungeon.

    Attributes:
        __player (tuple): The current location of the player in the dungeon.
        __dungeon (DungeonGenerator): An instance of the DungeonGenerator class used to generate the maze layout.
        __maze (list): The raw maze layout generated by the DungeonGenerator.
        __maze_rooms (list): A 2D list of Room instances corresponding to each position in the maze.
    """

    def __init__(self, row: int, col: int):
        """
        Initializes the Dungeon with specified dimensions.

        :param row: Number of rows in the dungeon.
        :param col: Number of columns in the dungeon.
        """
        self.__player = None
        self.__dungeon = DungeonGenerator(row, col)
        self.__maze = self.__dungeon.get_maze()
        self.__maze_rooms = [[None for _ in range(row)] for _ in range(col)]
        self.fill_maze()

    def fill_maze(self):
        """
        Fills the maze with Room instances.

        Iterates through the maze layout and generates a Room for each position based on the maze's content.
        Sets the player's initial location if the room is marked as the entrance (represented by 'X').
        """
        print("Filling maze:")
        for col in range(len(self.__maze)):
            for row in range(len(self.__maze[col])):
                room = Room((col, row))
                room.generate(self.__maze[col][row])
                self.__maze_rooms[col][row] = room
                print(f"Room at ({col}, {row}): {self.__maze[col][row]}")  # Debug print
                if self.__maze[col][row] == "X":
                    self.__player = (col, row)
                    print(f"Player location set to: {self.player_location}")  # Debug print

    # Rest of the Dungeon class remains the same
    def get_room(self, col, row):
        """
        Retrieves the Room object at the specified column and row.

        :param col: The column of the room.
        :param row: The row of the room.
        :return: The Room object at the specified location, or None if the location is invalid.
        """
        if 0 <= col < len(self.__maze_rooms) and 0 <= row < len(self.__maze_rooms[col]):
            return self.__maze_rooms[col][row]
        else:
            return None  # or handle this case as you see fit

    @property
    def player_location(self):
        """
        Returns the current location of the player in the dungeon.

        :return: A tuple representing the player's location (column, row).
        """
        return self.__player

    def get_maze_raw(self):
        """
        Returns the raw maze layout generated by the DungeonGenerator.

        :return: A DungeonGenerator instance representing the maze layout.
        """
        return self.__dungeon


# Usage
dungeon = Dungeon(7, 7)

print(dungeon.get_maze_raw())
specific_room = dungeon.get_room(5, 5)  # Get room at col 5, row 5
if specific_room:
    print(specific_room.stat())  # Access Room's stat method

print(f"\nplayer location: {dungeon.player_location}")

